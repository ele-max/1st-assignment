hackerRank basic data types
es 1
n = int(input())
scores = list(map(int, input().split()))
scores.sort(reverse=True)

runner_up_score = None
for score in scores:
    if score < max(scores):
        runner_up_score = score
        break

if runner_up_score is not None:
    print(runner_up_score)
else:
    print("There is no runner-up score.")
    
    
es 2
n = int(input())
students = []
for i in range(n):
    name = input()
    grade = float(input())
    students.append([name, grade])

students.sort(key=lambda x: x[1])

second_lowest_grade = None
for student in students:
    if second_lowest_grade is None:
        if student[1] != students[0][1]:
            second_lowest_grade = student[1]
    elif student[1] > second_lowest_grade:
        break
        
        
es 3

n = int(input())
marks = {}
for i in range(n):
    name, *line = input().split()
    scores = list(map(float, line))
    marks[name] = scores

query_name = input()

average_marks = sum(marks[query_name]) / len(marks[query_name])
print("{:.2f}".format(average_marks))
        
second_lowest_students = []
for student in students:
    if student[1] == second_lowest_grade:
        second_lowest_students.append(student[0])
    elif second_lowest_grade is not None and student[1] > second_lowest_grade:
        break

second_lowest_students.sort()

for student in second_lowest_students:
    print(student)
    
    
es 4 


my_list = []


n = int(input())

for i in range(n):
    command = input().split()
    if command[0] == 'insert':
        my_list.insert(int(command[1]), int(command[2]))
    elif command[0] == 'print':
        print(my_list)
    elif command[0] == 'remove':
        my_list.remove(int(command[1]))
    elif command[0] == 'append':
        my_list.append(int(command[1]))
    elif command[0] == 'sort':
        my_list.sort()
    elif command[0] == 'pop':
        my_list.pop()
    elif command[0] == 'reverse':
        my_list.reverse()
        
es 5 
n = int(input())
int_tuple = tuple(map(int, input().split()))
hash_value = hash(int_tuple)
print(hash_value)

